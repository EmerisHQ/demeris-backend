name: Recreate Emeris Dev Environment

on: 
  workflow_dispatch:

jobs:

  redis:
    runs-on: self-hosted
    steps:
      - name: Install
        uses: WyriHaximus/github-action-helm3@v2
        with:
          kubeconfig: '${{ secrets.KUBECONFIG }}'
          exec: |
            helm repo add bitnami https://charts.bitnami.com/bitnami;
            helm repo update;
            helm upgrade redis \
            --install \
            --namespace emeris \
            --set auth.enabled=false \
            --set auth.sentinel=false \
            --set architecture=standalone \
            bitnami/redis

  cockroachdb:
    runs-on: self-hosted
    steps:
      - name: Install
        uses: WyriHaximus/github-action-helm3@v2
        with:
          kubeconfig: '${{ secrets.KUBECONFIG }}'
          exec: |
            helm repo add cockroachdb https://charts.cockroachdb.com/;
            helm repo update;
            helm upgrade cockroachdb \
            --install \
            --version 7.0.0 \
            --namespace emeris \
            --set tls.enabled=false \
            --set statefulset.replicas=3 \
            cockroachdb/cockroachdb

  ingress:
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Create
        uses: steebchen/kubectl@v2.0.0
        with:
          config: ${{ secrets.KUBECONFIG_B64 }}
          command: apply --namespace emeris -f ci/dev/ingress.yaml

  cns-server:
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get cns-server version
        run: echo "CNS_SERVER=$(cat ./envs/dev.json | jq -r '.["cns-server"]')" >> $GITHUB_ENV

      - name: Call repository_dispatch on demeris-backend
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.TENDERBOT_GIT_TOKEN }}
          repository: allinbits/demeris-backend
          event-type: dev-push-cns-server
          client-payload: |
            {
              "repo_name":"emeris-cns-server",
              "branch_name":"main",
              "image_name":"emeris-cns-server",
              "image_sha":"${{ env.CNS_SERVER }}",
              "service_name":"cns-server",
              "deploy_type":"cns-server"
            }

  api-server:
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get api-server version
        run: echo "API_SERVER=$(cat ./envs/dev.json | jq -r '.["api-server"]')" >> $GITHUB_ENV

      - name: Call repository_dispatch on demeris-backend
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.TENDERBOT_GIT_TOKEN }}
          repository: allinbits/demeris-backend
          event-type: dev-push-api-server
          client-payload: |
            {
              "repo_name":"demeris-api-server",
              "branch_name":"main",
              "image_name":"emeris-api-server",
              "image_sha":"${{ env.API_SERVER }}",
              "service_name":"api-server",
              "deploy_type":"api-server"
            }

  rpcwatcher:
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get rpc-watcher version
        run: echo "RPC_WATCHER=$(cat ./envs/dev.json | jq -r '.["rpcwatcher"]')" >> $GITHUB_ENV

      - name: Call repository_dispatch on demeris-backend
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.TENDERBOT_GIT_TOKEN }}
          repository: allinbits/demeris-backend
          event-type: dev-push-emeris-rpcwatcher
          client-payload: |
            {
              "repo_name":"emeris-rpcwatcher",
              "branch_name":"main",
              "image_name":"emeris-rpcwatcher",
              "image_sha":"${{ env.RPC_WATCHER }}",
              "service_name":"emeris-rpcwatcher",
              "deploy_type":"emeris-rpcwatcher"
            }

  price-oracle:
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get price-oracle version
        run: echo "PRICE_ORACLE=$(cat ./envs/dev.json | jq -r '.["price-oracle"]')" >> $GITHUB_ENV

      - name: Call repository_dispatch on demeris-backend
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.TENDERBOT_GIT_TOKEN }}
          repository: allinbits/demeris-backend
          event-type: dev-push-price-oracle-server
          client-payload: |
            {
              "repo_name":"emeris-price-oracle",
              "branch_name":"main",
              "image_name":"emeris-price-oracle",
              "image_sha":"${{ env.PRICE_ORACLE }}",
              "service_name":"price-oracle",
              "deploy_type":"price-oracle"
            }

  ticket-watcher:
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get ticket-watcher version
        run: echo "TICKET_WATCHER=$(cat ./envs/dev.json | jq -r '.["ticket-watcher"]')" >> $GITHUB_ENV

      - name: Call repository_dispatch on demeris-backend
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.TENDERBOT_GIT_TOKEN }}
          repository: allinbits/demeris-backend
          event-type: dev-push-ticket-watcher
          client-payload: |
            {
              "repo_name":"emeris-ticket-watcher",
              "branch_name":"main",
              "image_name":"emeris-ticket-watcher",
              "image_sha":"${{ env.TICKET_WATCHER }}",
              "service_name":"ticket-watcher",
              "deploy_type":"ticket-watcher"
            }

  daggregation:
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get daggregation version
        run: echo "DAGGREGATION=$(cat ./envs/dev.json | jq -r '.["daggregation"]')" >> $GITHUB_ENV

      - name: Call repository_dispatch on demeris-backend
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.TENDERBOT_GIT_TOKEN }}
          repository: allinbits/demeris-backend
          event-type: dev-push-daggregation
          client-payload: |
            {
              "repo_name":"daggregation",
              "branch_name":"master",
              "image_name":"emeris-daggregation",
              "image_sha":"${{ env.DAGGREGATION }}",
              "service_name":"daggregation",
              "deploy_type":"daggregation"
            }

  dexinfo:
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get dexinfo version
        run: echo "DEXINFO=$(cat ./envs/dev.json | jq -r '.["dexinfo"]')" >> $GITHUB_ENV

      - name: Call repository_dispatch on demeris-backend
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.TENDERBOT_GIT_TOKEN }}
          repository: allinbits/demeris-backend
          event-type: dev-push-dexinfo
          client-payload: |
            {
              "repo_name":"emeris-dexinfo",
              "branch_name":"main",
              "image_name":"emeris-dexinfo",
              "image_sha":"${{ env.DEXINFO }}",
              "service_name":"dexinfo",
              "deploy_type":"dexinfo"
            }

  sdk-service-v42:
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get sdk-service-v42 version
        run: echo "SDK_SERVICE_42=$(cat ./envs/dev.json | jq -r '.["sdk-service-v42"]')" >> $GITHUB_ENV

      - name: Call repository_dispatch on demeris-backend
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.TENDERBOT_GIT_TOKEN }}
          repository: allinbits/demeris-backend
          event-type: dev-push-sdk-service-v42
          client-payload: |
            {
              "repo_name":"sdk-service",
              "branch_name":"main",
              "image_name":"emeris-sdk-service-v42",
              "image_sha":"${{ env.SDK_SERVICE_42 }}",
              "service_name":"sdk-service-v42",
              "deploy_type":"sdk-service-v42"
            }

  sdk-service-v44:
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get sdk-service-v44 version
        run: echo "SDK_SERVICE_44=$(cat ./envs/dev.json | jq -r '.["sdk-service-v44"]')" >> $GITHUB_ENV

      - name: Call repository_dispatch on demeris-backend
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.TENDERBOT_GIT_TOKEN }}
          repository: allinbits/demeris-backend
          event-type: dev-push-sdk-service-v44
          client-payload: |
            {
              "repo_name":"sdk-service",
              "branch_name":"main",
              "image_name":"emeris-sdk-service-v44",
              "image_sha":"${{ env.SDK_SERVICE_44 }}",
              "service_name":"sdk-service-v44",
              "deploy_type":"sdk-service-v44"
            }

  nodesets:
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install nodesets
        uses: steebchen/kubectl@v2.0.0
        with:
          config: ${{ secrets.KUBECONFIG_B64 }}
          command: apply --namespace emeris -f ./ci/dev/nodesets

  nodeset-verification:
    strategy:
      matrix:
        nodeset:
        - akash
        - cosmos-hub
        - terra
    runs-on: self-hosted
    needs: [ nodesets ]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Wait for chains to boot
        uses: steebchen/kubectl@v2.0.0
        with:
          config: ${{ secrets.KUBECONFIG_B64 }}
          command: |
            wait nodeset \
            ${{ matrix.nodeset }} \
            --namespace emeris \
            --for jsonpath={.status.phase}=Running \
            --timeout=180s

      - name: Delete nodesets
        if: ${{ failure() }}
        id: delete
        uses: steebchen/kubectl@v2.0.0
        with:
          config: ${{ secrets.KUBECONFIG_B64 }}
          command: delete --namespace emeris -f ./ci/dev/nodesets/${{ matrix.nodeset }}.yaml

      - name: Wait for chains to be deleted
        if: ${{ steps.delete.outcome == 'success' }}
        id: wait-delete
        uses: steebchen/kubectl@v2.0.0
        with:
          config: ${{ secrets.KUBECONFIG_B64 }}
          command: |
            wait nodeset \
            ${{ matrix.nodeset }} \
            --namespace emeris \
            --for="delete" \
            --timeout=180s

      - name: Reinstall nodesets
        if: ${{ steps.wait-delete.outcome == 'success' }}
        id: reinstall
        uses: steebchen/kubectl@v2.0.0
        with:
          config: ${{ secrets.KUBECONFIG_B64 }}
          command: apply --namespace emeris -f ./ci/dev/nodesets/${{ matrix.nodeset }}.yaml

      - name: Wait for chains to boot
        if: ${{ steps.reinstall.outcome == 'success' }}
        uses: steebchen/kubectl@v2.0.0
        with:
          config: ${{ secrets.KUBECONFIG_B64 }}
          command: |
            wait nodeset \
            ${{ matrix.nodeset }} \
            --namespace emeris \
            --for jsonpath={.status.phase}=Running \
            --timeout=180s

  relayers:
    runs-on: self-hosted
    needs: [ nodesets ]
    if: ${{ needs.nodeset-verification.result == 'success' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # Give the other jobs an opportunity to create their resources
      # Otherwise the 'kubectl wait' query will immediately fail (no resources found)
      - name: Sleep for 1 min
        uses: whatnick/wait-action@master
        with:
          time: '1m'

      - name: Install relayers
        uses: steebchen/kubectl@v2.0.0
        with:
          config: ${{ secrets.KUBECONFIG_B64 }}
          command: apply --namespace emeris -f ./ci/dev/relayers

  cns-chains:
    needs: 
    - cns-server
    - relayers
    runs-on: self-hosted
    if: ${{ needs.relayers.result == 'success' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # Give the other jobs an opportunity to create their resources
      # Otherwise the 'kubectl wait' query will immediately fail (no resources found)
      - name: Sleep for 1 min
        uses: whatnick/wait-action@master
        with:
          time: '1m'

      - name: Wait for CNS to boot
        uses: steebchen/kubectl@v2.0.0
        with:
          config: ${{ secrets.KUBECONFIG_B64 }}
          command: |
            wait pod \
            --namespace emeris \
            --for="condition=ready" \
            --selector="app.kubernetes.io/name=emeris-cns-server" \
            --timeout=180s

      - name: Deploy chains to CNS
        run: |
          for f in "./ci/dev/chains/"*
          do
            curl -X POST -d @$f https://dev.demeris.io/v1/cns/add
          done

